# Find optimize linear algebra routines
INCLUDE(${SCAFFOLD_DIR}/CMake/FindLA.cmake)

# Find HDF5
INCLUDE(ExternalProject)
FIND_PATH(HDF5_INCLUDE_DIR hdf5.h $ENV{HDF5_HOME}/include ${SCAFFOLD_INSTALL_DIR}/include)
FIND_LIBRARY(HDF5_LIB hdf5 $ENV{HDF5_HOME}/lib $ENV{HDF5_HOME}/lib64 ${SCAFFOLD_INSTALL_DIR}/lib)
FIND_LIBRARY(HDF5_CPP_LIB hdf5_cpp $ENV{HDF5_HOME}/lib $ENV{HDF5_HOME}/lib64 ${SCAFFOLD_INSTALL_DIR}/lib)
SET(HDF5_LIBS ${HDF5_LIB} ${HDF5_CPP_LIB})
IF(HDF5_INCLUDE_DIR AND HDF5_LIBS)
    INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR})
    LINK_LIBRARIES(${HDF5_LIBS})
    MESSAGE(STATUS "HDF5_INCLUDE_DIR=${HDF5_INCLUDE_DIR}")
    MESSAGE(STATUS "HDF5_LIBS=${HDF5_LIBS}")
ELSE()
    ExternalProject_Add(
      hdf5_project
      URL http://www.hdfgroup.org/ftp/HDF5/current/src/hdf5-1.8.13.tar.gz
      SOURCE_DIR ${SCAFFOLD_DEPENDS_DIR}/hdf5
      CONFIGURE_COMMAND ${SCAFFOLD_DEPENDS_DIR}/hdf5/configure --prefix=${SCAFFOLD_INSTALL_DIR} --enable-cxx
      BUILD_COMMAND make
    )
    SET(HDF5_LIBS hdf5 hdf5_cpp)
    MESSAGE(STATUS "HDF5_HOME not found. Installing in SCAFFOLD_DEPENDS_DIR.")
ENDIF()

# Find Einspline
FIND_PATH(EINSPLINE_INCLUDE_DIR einspline $ENV{EINSPLINE_HOME}/include ${SCAFFOLD_INSTALL_DIR}/include)
FIND_LIBRARY(EINSPLINE_LIBS einspline $ENV{EINSPLINE_HOME}/lib $ENV{EINSPLINE_HOME}/lib64 ${SCAFFOLD_INSTALL_DIR}/lib)
IF(EINSPLINE_INCLUDE_DIR AND EINSPLINE_LIBS)
    INCLUDE_DIRECTORIES(${EINSPLINE_INCLUDE_DIR})
    LINK_LIBRARIES(${EINSPLINE_LIBS})
    MESSAGE(STATUS "EINSPLINE_INCLUDE_DIR=${EINSPLINE_INCLUDE_DIR}")
    MESSAGE(STATUS "EINSPLINE_LIBS=${EINSPLINE_LIBS}")
ELSE()
    ExternalProject_Add(
      meinspline_project
      URL https://github.com/etano/meinspline/archive/master.tar.gz
      SOURCE_DIR ${SCAFFOLD_DEPENDS_DIR}/meinspline
      CONFIGURE_COMMAND ${SCAFFOLD_DEPENDS_DIR}/meinspline/configure --prefix=${SCAFFOLD_INSTALL_DIR}
      BUILD_COMMAND make
    )
    SET(EINSPLINE_LIBS einspline)
    MESSAGE(STATUS "EINSPLINE_HOME not found. Installing in SCAFFOLD_DEPENDS_DIR.")
ENDIF()

# Find Armadillo
FIND_PATH(ARMADILLO_INCLUDE_DIR armadillo $ENV{ARMADILLO_HOME}/include ${SCAFFOLD_INSTALL_DIR}/include)
FIND_LIBRARY(ARMADILLO_LIBS armadillo $ENV{ARMADILLO_HOME}/lib $ENV{ARMADILLO_HOME}/lib64 ${SCAFFOLD_INSTALL_DIR}/lib)
IF(ARMADILLO_INCLUDE_DIR AND ARMADILLO_LIBS)
    INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIR})
    LINK_LIBRARIES(${ARMADILLO_LIBS})
    MESSAGE(STATUS "ARMADILLO_INCLUDE_DIR=${ARMADILLO_INCLUDE_DIR}")
    MESSAGE(STATUS "ARMADILLO_LIBS=${ARMADILLO_LIBS}")
ELSE()
    ExternalProject_Add(
      armadillo_project
      URL http://sourceforge.net/projects/arma/files/armadillo-4.450.4.tar.gz
      SOURCE_DIR ${SCAFFOLD_DEPENDS_DIR}/armadillo
      CMAKE_COMMAND cmake . -DCMAKE_INSTALL_PREFIX=${SCAFFOLD_INSTALL_DIR}
    )
    SET(ARMADILLO_LIBS armadillo)
    MESSAGE(STATUS "ARMADILLO_HOME not found. Installing in SCAFFOLD_DEPENDS_DIR.")
ENDIF()

INCLUDE_DIRECTORIES(${SCAFFOLD_INSTALL_DIR}/include)
LINK_DIRECTORIES(${SCAFFOLD_INSTALL_DIR}/lib)

# Set scaffold SRCS
SET (SRCS ${SRCS}
  ${SCAFFOLD_DIR}/Communication/Communication.cpp
  ${SCAFFOLD_DIR}/IO/InputClass.cpp
  ${SCAFFOLD_DIR}/IO/xmlParser.cpp
  ${SCAFFOLD_DIR}/RNG/RNGClass.cpp)

# Set scaffold libraries
SET (LIBS ${LIBS} ${LA_LIBS} ${HDF5_LIBS} ${EINSPLINE_LIBS} ${ARMADILLO_LIBS})
